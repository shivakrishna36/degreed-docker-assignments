Your fruit stand company has some software that calculates and serves a list of products and their prices, taking into account items that are on sale and how the sales affect the total price. This software consists of three components: a base-price component which serves the base prices of fruits sold by the fruit stand, a sales component which provides a list of items that are on sale and how much each item is discounted, and a total-price component which communicates with the other two and calculates the final price for each item.

These components have been running on a single Docker host, but as your business is expanding, it is time to upgrade to a swarm cluster for greater flexibility. Run these three application components as services in your swarm cluster, and provide them with a custom overlay network to facilitate isolated communication between them.

Configure these application components on the Swarm cluster so that the following specifications are met:

1. Create an overlay network called prices-overlay-net.
2. Create a service called base-price with 3 replicas using the linuxacademycontent/prices-base-price:1 image. Configure the service to use the prices-overlay-net network.
3. Create a service called sales with 3 replicas using the linuxacademycontent/prices-sales:1 image. Configure the service to use the prices-overlay-net network.
4. Create a service called total-price with 2 replicas using the linuxacademycontent/prices-total-price:1 image. Configure the service to use the prices-overlay-net network. Expose this service's port 80 on port 8080.

If everything is set up correctly, you should be able to access the total prices list with:
curl localhost:8080.


Good luck!
*********************************************************************************
				Solution
*********************************************************************************
create docker swarm 
initialise the docker swarm

[node2] (local) root@192.168.0.17 ~

docker swarm init

Error response from daemon: could not choose an IP address to advertise since this system has multiple addresses on different interfaces (192.168.0.17 on eth0 and 172.18.0.134 on eth1) - specify one with --advertise-addr

-------------------------------------------------
initialise docker swarm with ip

[node2] (local) root@192.168.0.17 ~

$ docker swarm init --advertise-addr 192.168.0.17

Swarm initialized: current node (oans5byc5m3qyr51iy85p1ik3) is now a manager.

To add a worker to this swarm, run the following command:
    docker swarm join --token SWMTKN-1-2m2zzqdl4pl3fujj16e6n3zgquflaradpc6fqswldueutr6zii-87mlj8a0w7aupai7g1xo8lox5 192.168.0.17:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.



-----------------------------------------------------------
Join the worker nodes using join comand from above

[node1] (local) root@192.168.0.18 ~
$ docker swarm join --token SWMTKN-1-2m2zzqdl4pl3fujj16e6n3zgquflaradpc6fqswldueutr6zii-87mlj8a0w7aupai7g1xo8lox5 192.168.0.17:2377
This node joined a swarm as a worker.

----------------------------------------------------------------
Join another node

[node3] (local) root@192.168.0.16 ~
$ docker swarm join --token SWMTKN-1-2m2zzqdl4pl3fujj16e6n3zgquflaradpc6fqswldueutr6zii-87mlj8a0w7aupai7g1xo8lox5 192.168.0.17:2377
This node joined a swarm as a worker.

----------------------------------------------------------------
create an overlay network

[node2] (local) root@192.168.0.17 ~

$ docker network create --driver overlay prices-overlay-net

tz22bmjiilbinwrw9pjxm3dfj


-------------------------------------------------------------
list of networks

[node2] (local) root@192.168.0.17 ~

$ docker network ls

NETWORK ID          NAME                 DRIVER              SCOPE
e42cef2cd7c9        bridge               bridge              local
0c49434a41fe        docker_gwbridge      bridge              local
588fe31ea253        host                 host                local
415ta65m1o8q        ingress              overlay             swarm
6c9a01eac38b        none                 null                local
tz22bmjiilbi        prices-overlay-net   overlay             swarm



-----------------------------------------------------
create a service called base-price with 3 replicas under overlay network

[node2] (local) root@192.168.0.17 ~

$ docker service create --name base-price --replicas 3 --network prices-overlay-net linuxacademycontent/prices-base-price:1

2rlcf37ldjbzhsjd2hh0oyf7l
overall progress: 3 out of 3 tasks 
1/3: running   [==================================================>] 
2/3: running   [==================================================>] 
3/3: running   [==================================================>] 
verify: Service converged 



----------------------------------------------------------------
create a service called sales with 3 replicas under overlay network

[node2] (local) root@192.168.0.17 ~
$ docker service create --name sales --replicas 3 --network prices-overlay-net linuxacademycontent/prices-sales:10w9zw8lcyo3az3esei4m6r9xz

overall progress: 3 out of 3 tasks 
1/3: running   [==================================================>] 
2/3: running   [==================================================>] 
3/3: running   [==================================================>] 
verify: Service converged 


----------------------------------------------------------------------
create a service called total-price with 3 replicas under overlay network mapping port with 8080 to host

[node2] (local) root@192.168.0.17 ~

$ docker service create --name total-price --replicas 3 -p 8080:80 --network prices-overlay-net linuxacademycontent/prices-total-price:1

kbdelvfbzbsba660852504bg6
overall progress: 3 out of 3 tasks 
1/3: running   [==================================================>] 
2/3: running   [==================================================>] 
3/3: running   [==================================================>] 
verify: Service converged 


-------------------------------------------------------------------
check output in manager node(node2)

[node2] (local) root@192.168.0.17 ~
$ curl localhost:8080

{
    "description": "A list of total prices, including discounts.",
    "products": [
        {
            "name": "apple",
            "price": "0.98"
        },
        {
            "name": "banana",
            "price": "1.00"
        },
        {
            "name": "blueberry",
            "price": "3.99"
        },
        {
            "name": "coconut",
            "price": "4.99"
        },
        {
            "name": "cranberry",
            "price": "2.09"
        },
        {
            "name": "cucumber",
            "price": "0.50"
        },
        {
            "name": "currant",
            "price": "2.00"
        },
        {
            "name": "olive",
            "price": "2.50"
        },
        {
            "name": "orange",
            "price": "1.31"
        },
        {
            "name": "pamelo",
            "price": "3.00"
        },
        {
            "name": "papaya",
            "price": "4.75"
        }
    ]
}

-------------------------------------------------------------
check in worker node(node1)

[node1] (local) root@192.168.0.18 ~
$ curl localhost:8080
{
    "description": "A list of total prices, including discounts.",
    "products": [
        {
            "name": "apple",
            "price": "0.98"
        },
        {
            "name": "banana",
            "price": "1.00"
        },
        {
            "name": "blueberry",
            "price": "3.99"
        },
        {
            "name": "coconut",
            "price": "4.99"
        },
        {
            "name": "cranberry",
            "price": "2.09"
        },
        {
            "name": "cucumber",
            "price": "0.50"
        },
        {
            "name": "currant",
            "price": "2.00"
        },
        {
            "name": "olive",
            "price": "2.50"
        },
        {
            "name": "orange",
            "price": "1.31"
        },
        {
            "name": "pamelo",
            "price": "3.00"
        },
        {
            "name": "papaya",
            "price": "4.75"
        }
    ]
}

---------------------------------------------------
check in node3

[node3] (local) root@192.168.0.16 ~
$ curl localhost:8080
{
    "description": "A list of total prices, including discounts.",
    "products": [
        {
            "name": "apple",
            "price": "0.98"
        },
        {
            "name": "banana",
            "price": "1.00"
        },
        {
            "name": "blueberry",
            "price": "3.99"
        },
        {
            "name": "coconut",
            "price": "4.99"
        },
        {
            "name": "cranberry",
            "price": "2.09"
        },
        {
            "name": "cucumber",
            "price": "0.50"
        },
        {
            "name": "currant",
            "price": "2.00"
        },
        {
            "name": "olive",
            "price": "2.50"
        },
        {
            "name": "orange",
            "price": "1.31"
        },
        {
            "name": "pamelo",
            "price": "3.00"
        },
        {
            "name": "papaya",
            "price": "4.75"
        }
    ]
}